-- Query for creating database and tables

-- Create Database
CREATE DATABASE CulinaryRecipes;
GO

USE CulinaryRecipes;
GO

-- Create Ingredient table
CREATE TABLE Ingredient (
    INGREDIENT_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    KCAL INT,
    ALLERGENS VARCHAR(100),
    MEASUREMENT_UNIT VARCHAR(20)
);
GO

-- Create Category table
CREATE TABLE Category (
    CATEGORY_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    CUISINE_STYLE VARCHAR(50),
    DIFFICULTY INT
);
GO

-- Create Recipe table
CREATE TABLE Recipe (
    RECIPE_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    INGREDIENT_COUNT INT NOT NULL,
    DURATION INT NOT NULL,  -- in minutes
    CATEGORY_ID INT NOT NULL,
    CONSTRAINT fk_category_recipe FOREIGN KEY(CATEGORY_ID) REFERENCES Category(CATEGORY_ID)
);
GO

-- Create Recipe-Ingredient relationship table (many-to-many)
CREATE TABLE Recipe_Ingredient (
    RECIPE_ID INT NOT NULL,
    INGREDIENT_ID INT NOT NULL,
    QUANTITY DECIMAL(10,2),
    CONSTRAINT fk_recipe_ingredient_recipe FOREIGN KEY(RECIPE_ID) REFERENCES Recipe(RECIPE_ID),
    CONSTRAINT fk_recipe_ingredient_ingredient FOREIGN KEY(INGREDIENT_ID) REFERENCES Ingredient(INGREDIENT_ID)
        ON DELETE CASCADE
);
GO

-- Create UserAccount table
CREATE TABLE UserAccount (
    USER_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    REGISTRATION_DATE DATETIME DEFAULT GETDATE()
);
GO

-- Create Review table
CREATE TABLE Review (
    REVIEW_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    RECIPE_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    RATING FLOAT NOT NULL CHECK(RATING >= 1 AND RATING <= 10),
    COMMENT VARCHAR(255),
    REVIEW_DATE DATETIME DEFAULT GETDATE(),
    
    -- Foreign Keys
    CONSTRAINT fk_review_recipe FOREIGN KEY (RECIPE_ID) REFERENCES Recipe(RECIPE_ID),
    CONSTRAINT fk_review_user FOREIGN KEY (USER_ID) REFERENCES UserAccount(USER_ID)
);
GO